local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Utility function to create UI elements with safety
local function create(className, props)
    local obj = Instance.new(className)
    for k,v in pairs(props or {}) do
        if k:sub(1,2) == "On" and typeof(v) == "function" then
            obj[k:sub(3)] = v
        else
            obj[k] = v
        end
    end
    return obj
end

-- Round corners using UIStroke or UIGradient and ClipsDescendants
local function addRoundCorners(frame, radius)
    radius = radius or UDim.new(0, 12)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = radius
    corner.Name = "UICorner"
    corner.Parent = frame
    return corner
end

-- Add shadow effect
local function addShadow(frame)
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.AnchorPoint = Vector2.new(0.5,0.5)
    shadow.BackgroundTransparency = 1
    shadow.Image = "rbxassetid://7742500831" -- shadow image (a soft black glow)
    shadow.ImageColor3 = Color3.fromRGB(0,0,0)
    shadow.ImageTransparency = 0.7
    shadow.Size = UDim2.new(1,20,1,20)
    shadow.Position = UDim2.new(0.5,0,0.5,0)
    shadow.ZIndex = frame.ZIndex - 1
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(10,10,118,118)
    shadow.Parent = frame
end

-- Toggle button component
local function createToggle(parent, name, default, callback)
    local frame = create("Frame", {
        Parent = parent,
        Size = UDim2.new(1,0,0,30),
        BackgroundTransparency = 1,
        LayoutOrder = 0,
    })
    local label = create("TextLabel", {
        Parent = frame,
        Text = name or "Toggle",
        Font = Enum.Font.GothamSemibold,
        TextSize = 16,
        TextColor3 = Color3.fromRGB(40,40,40),
        BackgroundTransparency = 1,
        Size = UDim2.new(0.75,0,1,0),
        TextXAlignment = Enum.TextXAlignment.Left,
        AnchorPoint = Vector2.new(0,0),
        Position = UDim2.new(0,10,0,0),
    })
    local toggleButton = create("Frame", {
        Parent = frame,
        Size = UDim2.new(0, 40, 0, 20),
        Position = UDim2.new(1, -50, 0.5, 0),
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundColor3 = Color3.fromRGB(220,220,220),
        BorderSizePixel = 0,
    })
    addRoundCorners(toggleButton, UDim.new(0, 10))

    local toggleCircle = create("Frame", {
        Parent = toggleButton,
        Size = UDim2.new(0, 18, 0, 18),
        Position = default and UDim2.new(1, -18, 0, 1) or UDim2.new(0, 0, 0, 1),
        BackgroundColor3 = default and Color3.fromRGB(70,130,230) or Color3.fromRGB(160,160,160),
        BorderSizePixel = 0,
    })
    addRoundCorners(toggleCircle, UDim.new(0, 9))

    local toggled = default or false

    local function setToggle(state)
        toggled = state
        if toggled then
            toggleButton.BackgroundColor3 = Color3.fromRGB(180,220,255)
            toggleCircle:TweenPosition(UDim2.new(1, -18, 0, 1), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.25, true)
            toggleCircle.BackgroundColor3 = Color3.fromRGB(70,130,230)
        else
            toggleButton.BackgroundColor3 = Color3.fromRGB(220,220,220)
            toggleCircle:TweenPosition(UDim2.new(0, 0, 0, 1), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.25, true)
            toggleCircle.BackgroundColor3 = Color3.fromRGB(160,160,160)
        end
        if callback then
            callback(toggled)
        end
    end

    toggleButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            setToggle(not toggled)
        end
    end)

    setToggle(toggled)

    return frame, function() return toggled end
end

-- Button component
local function createButton(parent, text, callback)
    local button = create("TextButton", {
        Parent = parent,
        Text = text or "Button",
        Font = Enum.Font.GothamBold,
        TextSize = 18,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundColor3 = Color3.fromRGB(40, 40, 40),
        Size = UDim2.new(1, 0, 0, 40),
        AutoButtonColor = false,
        ClipsDescendants = true,
    })
    addRoundCorners(button, UDim.new(0, 10))
    button.ZIndex = parent.ZIndex + 1

    button.MouseEnter:Connect(function()
        button.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
    end)

    button.MouseLeave:Connect(function()
        button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    end)

    button.MouseButton1Click:Connect(function()
        if callback then callback() end
    end)

    return button
end

-- Textbox component
local function createTextbox(parent, placeholder)
    local frame = create("Frame", {
        Parent = parent,
        Size = UDim2.new(1, 0, 0, 36),
        BackgroundColor3 = Color3.fromRGB(245, 245, 245),
        BorderSizePixel = 0,
    })
    addRoundCorners(frame, UDim.new(0, 10))

    local textBox = create("TextBox", {
        Parent = frame,
        PlaceholderText = placeholder or "",
        Font = Enum.Font.Gotham,
        TextSize = 16,
        TextColor3 = Color3.fromRGB(60, 60, 60),
        BackgroundTransparency = 1,
        Size = UDim2.new(1, -20, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        ClearTextOnFocus = false,
    })

    return frame, textBox
end

-- UI Main Container
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "RayfieldStyleUI"
screenGui.ResetOnSpawn = false
screenGui.DisplayOrder = 9999
screenGui.Parent = playerGui

local mainFrame = create("Frame", {
    Parent = screenGui,
    Size = UDim2.new(0, 500, 0, 400),
    Position = UDim2.new(0.5, -250, 0.5, -200),
    BackgroundColor3 = Color3.fromRGB(245, 245, 245),
    BorderSizePixel = 0,
    ClipsDescendants = true
})
addRoundCorners(mainFrame, UDim.new(0, 20))
addShadow(mainFrame)

-- Header
local header = create("TextLabel", {
    Parent = mainFrame,
    Size = UDim2.new(1, 0, 0, 60),
    BackgroundTransparency = 1,
    Text = "Rayfield Style UI",
    Font = Enum.Font.GothamBold,
    TextSize = 32,
    TextColor3 = Color3.fromRGB(30,30,30),
    TextXAlignment = Enum.TextXAlignment.Center,
    TextYAlignment = Enum.TextYAlignment.Center,
    ZIndex = 2,
})
header.Position = UDim2.new(0,0,0,0)

-- Tab container
local tabBar = create("Frame", {
    Parent = mainFrame,
    Size = UDim2.new(1, 0, 0, 40),
    Position = UDim2.new(0, 0, 0, 60),
    BackgroundTransparency = 1,
    ClipsDescendants = true,
})
local tabs = {}

local contentFrame = create("Frame", {
    Parent = mainFrame,
    Size = UDim2.new(1, -40, 1, -100),
    Position = UDim2.new(0,20,0,100),
    BackgroundTransparency = 1,
    ClipsDescendants = true,
})

-- Tab button creation helper
local function createTabButton(name)
    local button = create("TextButton", {
        Parent = tabBar,
        Text = name,
        Font = Enum.Font.GothamSemibold,
        TextSize = 20,
        TextColor3 = Color3.fromRGB(120,120,120),
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 100, 1, 0),
        AutoButtonColor = false,
        ClipsDescendants = true,
    })

    addRoundCorners(button, UDim.new(0, 8))

    button.MouseEnter:Connect(function()
        if button ~= tabs.activeButton then
            button.TextColor3 = Color3.fromRGB(80,80,80)
        end
    end)
    button.MouseLeave:Connect(function()
        if button ~= tabs.activeButton then
            button.TextColor3 = Color3.fromRGB(120,120,120)
        end
    end)

    return button
end

-- Tab pages table
local tabPages = {}

-- Select tab function
local function selectTab(tabName)
    if tabs.activeButton then
        tabs.activeButton.TextColor3 = Color3.fromRGB(120,120,120)
        tabPages[tabs.activeTab].Visible = false
    end
    tabs.activeButton = tabs[tabName]
    tabs.activeTab = tabName

    tabs.activeButton.TextColor3 = Color3.fromRGB(20,20,20)
    tabPages[tabName].Visible = true
end

-- Create tabs and pages
local tabNames = {"Executor", "Settings"}

for i, name in ipairs(tabNames) do
    local btn = createTabButton(name)
    btn.Position = UDim2.new(0, (i-1)*110, 0, 0)
    tabs[name] = btn

    -- Create page frame
    local page = create("Frame", {
        Parent = contentFrame,
        Size = UDim2.new(1,0,1,0),
        BackgroundColor3 = Color3.fromRGB(255,255,255),
        ClipsDescendants = true,
        Visible = false,
    })
    addRoundCorners(page, UDim.new(0,16))
    tabPages[name] = page
end

-- Executor page UI --
local executorPage = tabPages["Executor"]

local inputFrame = create("Frame", {
    Parent = executorPage,
    Size = UDim2.new(1,-40, 0, 150),
    Position = UDim2.new(0, 20, 0, 20),
    BackgroundColor3 = Color3.fromRGB(245, 245, 245),
    ClipsDescendants = true,
})
addRoundCorners(inputFrame, UDim.new(0, 12))

local inputBoxFrame, inputBox = createTextbox(inputFrame, "Enter script here...")
inputBoxFrame.Size = UDim2.new(1,0,1,0)
inputBoxFrame.Position = UDim2.new(0,0,0,0)
inputBox.ClearTextOnFocus = false
inputBox.MultiLine = true
inputBox.TextWrapped = true
inputBox.TextYAlignment = Enum.TextYAlignment.Top
inputBox.AnchorPoint = Vector2.new(0,0)
inputBox.Text = ""

-- Output label
local outputLabel = create("TextLabel", {
    Parent = executorPage,
    Size = UDim2.new(1,-40, 0, 150),
    Position = UDim2.new(0, 20, 0, 200),
    BackgroundColor3 = Color3.fromRGB(240, 240, 240),
    TextColor3 = Color3.fromRGB(80, 80, 80),
    Font = Enum.Font.Gotham,
    TextSize = 16,
    TextWrapped = true,
    TextYAlignment = Enum.TextYAlignment.Top,
    BorderSizePixel = 0,
})
addRoundCorners(outputLabel, UDim.new(0, 12))
outputLabel.Text = "Output will show here..."

-- Execute Button
local execBtn = createButton(executorPage, "Execute", function()
    local scriptText = inputBox.Text
    if scriptText == "" then
        outputLabel.Text = "Please enter a script to execute."
        return
    end
    -- Fake "execution" simulation
    outputLabel.Text = "Executing script...\n\n" .. scriptText .. "\n\nScript executed successfully."
end)
execBtn.Size = UDim2.new(0, 120, 0, 45)
execBtn.Position = UDim2.new(0, 20, 0, 370)

-- Settings page UI --
local settingsPage = tabPages["Settings"]

local backgroundToggle, getToggled = createToggle(settingsPage, "Dark Mode", false, function(state)
    if state then
        mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        header.TextColor3 = Color3.fromRGB(220, 220, 220)
        for _, tabBtn in pairs(tabs) do
            if type(tabBtn) == "table" or not tabBtn:IsA then
                -- Skip unexpected entries
            elseif tabBtn:IsA("TextButton") and tabBtn ~= tabs.activeButton then
                tabBtn.TextColor3 = Color3.fromRGB(180,180,180)
            end
        end
        outputLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
        inputBox.TextColor3 = Color3.fromRGB(220, 220, 220)
        inputBoxFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        settingsPage.BackgroundColor3 = Color3.fromRGB(45,45,45)
    else
        mainFrame.BackgroundColor3 = Color3.fromRGB(245, 245, 245)
        header.TextColor3 = Color3.fromRGB(30, 30, 30)
        for _, tabBtn in pairs(tabs) do
            if type(tabBtn) == "table" or not tabBtn:IsA then
                -- Skip unexpected entries
            elseif tabBtn:IsA("TextButton") and tabBtn ~= tabs.activeButton then
                tabBtn.TextColor3 = Color3.fromRGB(120,120,120)
            end
        end
        outputLabel.TextColor3 = Color3.fromRGB(80, 80, 80)
        inputBox.TextColor3 = Color3.fromRGB(60, 60, 60)
        inputBoxFrame.BackgroundColor3 = Color3.fromRGB(245, 245, 245)
        settingsPage.BackgroundColor3 = Color3.fromRGB(255,255,255)
    end
end)
backgroundToggle.Position = UDim2.new(0, 20, 0, 20)

-- Initialize first tab selected
selectTab("Executor")

-- Allow dragging of the mainFrame
local dragging, dragInput, dragStart, startPos

local function update(input)
    local delta = input.Position - dragStart
    mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,
                                 startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

mainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = mainFrame.Position

        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

mainFrame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
        dragInput = input
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        update(input)
    end
end)

-- Return the screenGui for potential further customization if needed
return screenGui
